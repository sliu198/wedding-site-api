# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Start from scratch starter project

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
    PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary"

Parameters:
  AppId:
    Type: String
  DomainName:
    Type: String
  CertificateArn:
    Type: String
  JwtSecret:
    Type: String

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  api:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        CertificateArn: !Ref CertificateArn
        DomainName: !Sub 'api.${DomainName}'
        Route53:
          HostedZoneName: !Sub '${DomainName}.'
      DisableExecuteApiEndpoint: true
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - Content-Type
          - Cookie
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowOrigins:
          - !Sub 'https://www.${DomainName}'
    Connectors:
      subscribeFunctionConnector:
        Properties:
          SourceReference:
            Qualifier: $default/POST/subscribe
          Destination:
            Id: subscribeFunction
          Permissions:
            - Write
      authFunctionConnector:
        Properties:
          SourceReference:
            Qualifier: $default/POST/auth
          Destination:
            Id: authFunction
          Permissions:
            - Write
  subscribeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/subscribe-lambda.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          SUBSCRIPTIONS_TABLE_NAME: !Ref subscriptionsTable
      Events:
        httpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: api
            Method: POST
            Path: /subscribe
    Connectors:
      subscriptionsTableConnector:
        Properties:
          Destination:
            Id: subscriptionsTable
          Permissions:
            - Read
            - Write
  authFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/handlers/auth-lambda.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          PARTIES_TABLE_NAME: !Ref partiesTable
          JWT_SECRET: !Ref JwtSecret
      Events:
        httpApiEvent:
          Type: HttpApi
          Properties:
            ApiId: api
            Method: POST
            Path: /auth
    Connectors:
      subscriptionsTableConnector:
        Properties:
          Destination:
            Id: partiesTable
          Permissions:
            - Read
  subscriptionsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: email
        Type: String
      SSESpecification:
        SSEEnabled: true
  partiesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number
      SSESpecification:
        SSEEnabled: true
